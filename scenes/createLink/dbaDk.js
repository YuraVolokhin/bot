const WizardScene = require("telegraf/scenes/wizard");
const { Request, Ad, Service } = require("../../database");
const locale = require("../../locale");
const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");
const log = require("../../helpers/log");
const cheerio = require("cheerio");
const { default: axios } = require("axios");
const rand = require("../../helpers/rand");
const menu = require("../../commands/menu");

const dba_dk_domains = ["www.dba.dk", "dba.dk"];

const scene = new WizardScene(
  "create_link_dba_dk",
  async (ctx) => {
    try {
      const service = await Service.findOne({
        where: {
          code: "dba_dk",
        },
      });
      if (!service) {
        await ctx.scene.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç").catch((err) => err);
        return ctx.scene.leave();
      }
      log(ctx, "–ø–µ—Ä–µ—à—ë–ª –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Å—ã–ª–∫–∏ DBA.DK");
      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.scene.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ DBA.DK", {
        reply_markup: Markup.inlineKeyboard([
          [Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
        ]),
      });
      ctx.scene.state.data = {};
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      var url;
      try {
        url = new URL(ctx.message.text);
      } catch (err) {
        await ctx.replyOrEdit("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É").catch((err) => err);
        return ctx.wizard.prevStep();
      }
      if (!dba_dk_domains.includes(url.host)) {
        await ctx
          .replyOrEdit("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ DBA.DK")
          .catch((err) => err);
        return ctx.wizard.prevStep();
      }

      log(ctx, `–æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ DBA.DK (${url.href})`);

      await ctx.scene.reply("üîÑ –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...").catch((err) => err);
      const ad = await axios.get(encodeURI(url.href)),
        $ = cheerio.load(ad.data);

      const info = {
        title: $(".vip-heading-bar h1").first().text().trim(),
        price: $(".price-tag").first().text().trim(),
        adLink: url.href,
      };
      try {
        info.photo = $('[property="og:image"]').first().attr("content");
      } catch (err) {}

      if (!info.title || !info.price) {
        await ctx.scene
          .reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
          .catch((err) => err);
        return ctx.scene.leave();
      }
      log(ctx, `—Å–ø–∞—Ä—Å–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ DBA.DK (${url.href})`);
      ctx.scene.state.data = info;
      var text = `‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–ø–∞—Ä—Å–∏–ª–æ—Å—å!

–ù–∞–∑–≤–∞–Ω–∏–µ: <b>${escapeHTML(info.title)}</b>
–¶–µ–Ω–∞: <b>${escapeHTML(info.price)}</b>`;

      if (info.photo)
        await ctx
          .replyWithPhoto(
            {
              url: info.photo,
            },
            {
              parse_mode: "HTML",
              caption: text,
            }
          )
          .catch((err) => err);
      else await ctx.reply(text).catch((err) => err);
      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.scene
        .reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–§–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è)", {
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
          ]),
        })
        .catch((err) => err);
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      ctx.scene.state.data.name = ctx.message.text;
      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.scene
        .reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", {
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
          ]),
        })
        .catch((err) => err);
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!ctx.message?.text) return ctx.wizard.prevStep();
      ctx.scene.state.data.address = ctx.message.text;
      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      await ctx.scene
        .reply("–ß–µ–∫–µ—Ä –±–∞–ª–∞–Ω—Å–∞", {
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton("–í–∫–ª—é—á–∏—Ç—å", "true"),
              Markup.callbackButton("–í—ã–∫–ª—é—á–∏—Ç—å", "false"),
            ],
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel")],
          ]),
        })
        .catch((err) => err);
      return ctx.wizard.next();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (!["true", "false"].includes(ctx.callbackQuery?.data))
        return ctx.wizard.prevStep();
      ctx.scene.state.data.balanceChecker = ctx.callbackQuery.data == "true";
      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      const service = await Service.findOne({
        where: {
          code: "dba_dk",
        },
      });
      if (!service) {
        await ctx.scene.reply("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç").catch((err) => err);
        return ctx.scene.leave();
      }
      const ad = await Ad.create({
        id: parseInt(rand(999999, 99999999) + new Date().getTime() / 10000),
        userId: ctx.from.id,
        ...ctx.scene.state.data,
        serviceCode: "dba_dk",
      });

      log(ctx, `—Å–æ–∑–¥–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ DBA.DK <code>(ID: ${ad.id})</code>`);
      await ctx.scene.reply(
        `<b>‚úÖ –°—Å—ã–ª–∫–∞ üá©üá∞ DBA.DK —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>
      
üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: <b>https://${service.domain}/${ad.id}</b>
üîó –í–æ–∑–≤—Ä–∞—Ç: <b>https://${service.domain}/refund/${ad.id}</b>`,
        {
          parse_mode: "HTML",
        }
      );
      ctx.updateType = "message";
    } catch (err) {
      ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
    }
    return ctx.scene.leave();
  }
);

scene.leave(menu);

module.exports = scene;
